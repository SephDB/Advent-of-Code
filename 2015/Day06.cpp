#include <iostream>
#include <string>
#include <string_view>
#include <algorithm>
#include <numeric>
#include <iomanip>
#include <charconv>
#include <array>
#include <vector>
#include <bitset>

std::vector<std::string_view> split(std::string_view in, char delim) {
    std::vector<std::string_view> ret;
    std::size_t pos = 0;
    while((pos = in.find(delim)) != std::string_view::npos) {
        ret.push_back(in.substr(0,pos));
        in.remove_prefix(pos+1);
    }
    ret.push_back(in);
    return ret;
}

enum class Type {
    on, off, toggle
};

struct Instruction {
    Type t;
    int x,y;
    int x2,y2;
};

void solution(const std::vector<Instruction>& in) {
    std::bitset<1000*1000> res;
    std::array<std::int64_t,1000*1000> res2;
    std::fill(res2.begin(),res2.end(),0);
    for(const auto& i : in) {
        for(int x = i.x; x <= i.x2; ++x) {
            for(int y = i.y; y <= i.y2; ++y) {
                auto loc = y*1000+x;
                switch(i.t) {
                    case Type::on:
                        res.set(loc);
                        res2[loc]++;
                        break;
                    case Type::off:
                        res.reset(y*1000+x);
                        if(res2[loc] > 0) res2[loc]--;
                        break;
                    case Type::toggle:
                        res.flip(y*1000+x);
                        res2[loc] += 2;
                }
            }
        }
    }
    std::cout << "Part 1: " << res.count() << '\n';
    std::cout << "Part 2: " << std::accumulate(res2.begin(),res2.end(),0) << '\n';
}

std::vector<Instruction> input = {{Type::toggle,322,558,977,958},
{Type::toggle,537,781,687,941},
{Type::on,226,196,599,390},
{Type::on,240,129,703,297},
{Type::on,317,329,451,798},
{Type::on,957,736,977,890},
{Type::on,263,530,559,664},
{Type::on,158,270,243,802},
{Type::toggle,223,39,454,511},
{Type::toggle,544,218,979,872},
{Type::on,313,306,363,621},
{Type::toggle,173,401,496,407},
{Type::toggle,333,60,748,159},
{Type::off,87,577,484,608},
{Type::on,809,648,826,999},
{Type::toggle,352,432,628,550},
{Type::off,197,408,579,569},
{Type::off,1,629,802,633},
{Type::off,61,44,567,111},
{Type::toggle,880,25,903,973},
{Type::on,347,123,864,746},
{Type::toggle,728,877,996,975},
{Type::on,121,895,349,906},
{Type::on,888,547,931,628},
{Type::toggle,398,782,834,882},
{Type::on,966,850,989,953},
{Type::off,891,543,914,991},
{Type::toggle,908,77,916,117},
{Type::on,576,900,943,934},
{Type::off,580,170,963,206},
{Type::on,184,638,192,944},
{Type::toggle,940,147,978,730},
{Type::off,854,56,965,591},
{Type::toggle,717,172,947,995},
{Type::toggle,426,987,705,998},
{Type::on,987,157,992,278},
{Type::toggle,995,774,997,784},
{Type::off,796,96,845,182},
{Type::off,451,87,711,655},
{Type::off,380,93,968,676},
{Type::on,263,468,343,534},
{Type::on,917,936,928,959},
{Type::toggle,478,7,573,148},
{Type::off,428,339,603,624},
{Type::off,400,880,914,953},
{Type::toggle,679,428,752,779},
{Type::off,697,981,709,986},
{Type::toggle,482,566,505,725},
{Type::off,956,368,993,516},
{Type::toggle,735,823,783,883},
{Type::off,48,487,892,496},
{Type::off,116,680,564,819},
{Type::on,633,865,729,930},
{Type::off,314,618,571,922},
{Type::toggle,138,166,936,266},
{Type::on,444,732,664,960},
{Type::off,109,337,972,497},
{Type::off,51,432,77,996},
{Type::off,259,297,366,744},
{Type::toggle,801,130,917,544},
{Type::toggle,767,982,847,996},
{Type::on,216,507,863,885},
{Type::off,61,441,465,731},
{Type::on,849,970,944,987},
{Type::toggle,845,76,852,951},
{Type::toggle,732,615,851,936},
{Type::toggle,251,128,454,778},
{Type::on,324,429,352,539},
{Type::toggle,52,450,932,863},
{Type::off,449,379,789,490},
{Type::on,317,319,936,449},
{Type::toggle,887,670,957,838},
{Type::toggle,671,613,856,664},
{Type::off,186,648,985,991},
{Type::off,471,689,731,717},
{Type::toggle,91,331,750,758},
{Type::toggle,201,73,956,524},
{Type::toggle,82,614,520,686},
{Type::toggle,84,287,467,734},
{Type::off,132,367,208,838},
{Type::toggle,558,684,663,920},
{Type::on,237,952,265,997},
{Type::on,694,713,714,754},
{Type::on,632,523,862,827},
{Type::on,918,780,948,916},
{Type::on,349,586,663,976},
{Type::toggle,231,29,257,589},
{Type::toggle,886,428,902,993},
{Type::on,106,353,236,374},
{Type::on,734,577,759,684},
{Type::off,347,843,696,912},
{Type::on,286,699,964,883},
{Type::on,605,875,960,987},
{Type::off,328,286,869,461},
{Type::off,472,569,980,848},
{Type::toggle,673,573,702,884},
{Type::off,398,284,738,332},
{Type::on,158,50,284,411},
{Type::off,390,284,585,663},
{Type::on,156,579,646,581},
{Type::on,875,493,989,980},
{Type::toggle,486,391,924,539},
{Type::on,236,722,272,964},
{Type::toggle,228,282,470,581},
{Type::toggle,584,389,750,761},
{Type::off,899,516,900,925},
{Type::on,105,229,822,846},
{Type::off,253,77,371,877},
{Type::on,826,987,906,992},
{Type::off,13,152,615,931},
{Type::on,835,320,942,399},
{Type::on,463,504,536,720},
{Type::toggle,746,942,786,998},
{Type::off,867,333,965,403},
{Type::on,591,477,743,692},
{Type::off,403,437,508,908},
{Type::on,26,723,368,814},
{Type::on,409,485,799,809},
{Type::on,115,630,704,705},
{Type::off,228,183,317,220},
{Type::toggle,300,649,382,842},
{Type::off,495,365,745,562},
{Type::on,698,346,744,873},
{Type::on,822,932,951,934},
{Type::toggle,805,30,925,421},
{Type::toggle,441,152,653,274},
{Type::toggle,160,81,257,587},
{Type::off,350,781,532,917},
{Type::toggle,40,583,348,636},
{Type::on,280,306,483,395},
{Type::toggle,392,936,880,955},
{Type::toggle,496,591,851,934},
{Type::off,780,887,946,994},
{Type::off,205,735,281,863},
{Type::toggle,100,876,937,915},
{Type::on,392,393,702,878},
{Type::on,956,374,976,636},
{Type::toggle,478,262,894,775},
{Type::off,279,65,451,677},
{Type::on,397,541,809,847},
{Type::on,444,291,451,586},
{Type::toggle,721,408,861,598},
{Type::on,275,365,609,382},
{Type::on,736,24,839,72},
{Type::off,86,492,582,712},
{Type::on,676,676,709,703},
{Type::off,105,710,374,817},
{Type::toggle,328,748,845,757},
{Type::toggle,335,79,394,326},
{Type::toggle,193,157,633,885},
{Type::on,227,48,769,743},
{Type::toggle,148,333,614,568},
{Type::toggle,22,30,436,263},
{Type::toggle,547,447,688,969},
{Type::toggle,576,621,987,740},
{Type::on,711,334,799,515},
{Type::on,541,448,654,951},
{Type::toggle,792,199,798,990},
{Type::on,89,956,609,960},
{Type::toggle,724,433,929,630},
{Type::toggle,144,895,201,916},
{Type::toggle,226,730,632,871},
{Type::off,760,819,828,974},
{Type::toggle,887,180,940,310},
{Type::toggle,222,327,805,590},
{Type::off,630,824,885,963},
{Type::on,940,740,954,946},
{Type::on,193,373,779,515},
{Type::toggle,304,955,469,975},
{Type::off,405,480,546,960},
{Type::on,662,123,690,669},
{Type::off,615,238,750,714},
{Type::on,423,220,930,353},
{Type::on,329,769,358,970},
{Type::toggle,590,151,704,722},
{Type::off,884,539,894,671},
{Type::toggle,449,241,984,549},
{Type::toggle,449,260,496,464},
{Type::off,306,448,602,924},
{Type::on,286,805,555,901},
{Type::toggle,722,177,922,298},
{Type::toggle,491,554,723,753},
{Type::on,80,849,174,996},
{Type::off,296,561,530,856},
{Type::toggle,653,10,972,284},
{Type::toggle,529,236,672,614},
{Type::toggle,791,598,989,695},
{Type::on,19,45,575,757},
{Type::toggle,111,55,880,871},
{Type::off,197,897,943,982},
{Type::on,912,336,977,605},
{Type::toggle,101,221,537,450},
{Type::on,101,104,969,447},
{Type::toggle,71,527,587,717},
{Type::toggle,336,445,593,889},
{Type::toggle,214,179,575,699},
{Type::on,86,313,96,674},
{Type::toggle,566,427,906,888},
{Type::off,641,597,850,845},
{Type::on,606,524,883,704},
{Type::on,835,775,867,887},
{Type::toggle,547,301,897,515},
{Type::toggle,289,930,413,979},
{Type::on,361,122,457,226},
{Type::on,162,187,374,746},
{Type::on,348,461,454,675},
{Type::off,966,532,985,537},
{Type::on,172,354,630,606},
{Type::off,501,880,680,993},
{Type::off,8,70,566,592},
{Type::toggle,433,73,690,651},
{Type::toggle,840,798,902,971},
{Type::toggle,822,204,893,760},
{Type::off,453,496,649,795},
{Type::off,969,549,990,942},
{Type::off,789,28,930,267},
{Type::toggle,880,98,932,434},
{Type::toggle,568,674,669,753},
{Type::on,686,228,903,271},
{Type::on,263,995,478,999},
{Type::toggle,534,675,687,955},
{Type::off,342,434,592,986},
{Type::toggle,404,768,677,867},
{Type::toggle,126,723,978,987},
{Type::toggle,749,675,978,959},
{Type::off,445,330,446,885},
{Type::off,463,205,924,815},
{Type::off,417,430,915,472},
{Type::on,544,990,912,999},
{Type::off,201,255,834,789},
{Type::off,261,142,537,862},
{Type::off,562,934,832,984},
{Type::off,459,978,691,980},
{Type::off,73,911,971,972},
{Type::on,560,448,723,810},
{Type::on,204,630,217,854},
{Type::off,91,259,611,607},
{Type::on,877,32,978,815},
{Type::off,950,438,974,746},
{Type::toggle,426,30,609,917},
{Type::toggle,696,37,859,201},
{Type::toggle,242,417,682,572},
{Type::off,388,401,979,528},
{Type::off,79,345,848,685},
{Type::off,98,91,800,434},
{Type::toggle,650,700,972,843},
{Type::off,530,450,538,926},
{Type::on,428,559,962,909},
{Type::on,78,138,92,940},
{Type::toggle,194,117,867,157},
{Type::toggle,785,355,860,617},
{Type::off,379,441,935,708},
{Type::off,605,133,644,911},
{Type::toggle,10,963,484,975},
{Type::off,359,988,525,991},
{Type::off,509,138,787,411},
{Type::toggle,556,467,562,773},
{Type::on,119,486,246,900},
{Type::on,445,561,794,673},
{Type::off,598,681,978,921},
{Type::off,974,230,995,641},
{Type::off,760,75,800,275},
{Type::toggle,441,215,528,680},
{Type::off,701,636,928,877},
{Type::on,165,753,202,780},
{Type::toggle,501,412,998,516},
{Type::toggle,161,105,657,395},
{Type::on,113,340,472,972},
{Type::toggle,384,994,663,999},
{Type::on,969,994,983,997},
{Type::on,519,600,750,615},
{Type::off,363,899,948,935},
{Type::on,271,845,454,882},
{Type::off,376,528,779,640},
{Type::toggle,767,98,854,853},
{Type::toggle,107,322,378,688},
{Type::off,235,899,818,932},
{Type::on,445,611,532,705},
{Type::toggle,629,387,814,577},
{Type::toggle,112,414,387,421},
{Type::toggle,319,184,382,203},
{Type::on,627,796,973,940},
{Type::toggle,602,45,763,151},
{Type::off,441,375,974,545},
{Type::toggle,871,952,989,998},
{Type::on,717,272,850,817},
{Type::toggle,475,711,921,882},
{Type::toggle,66,191,757,481},
{Type::off,50,197,733,656},
{Type::toggle,83,575,915,728},
{Type::on,777,812,837,912},
{Type::on,20,984,571,994},
{Type::off,446,432,458,648},
{Type::on,715,871,722,890},
{Type::toggle,424,675,740,862},
{Type::toggle,580,592,671,900},
{Type::toggle,296,687,906,775}};

int main() {
    solution(input);
}
