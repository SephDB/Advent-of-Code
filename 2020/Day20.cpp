#include <iostream>
#include <string_view>
#include <array>
#include <cassert>
#include <vector>
#include <unordered_map>
#include <bitset>
#include <charconv>
#include <numeric>
#include <algorithm>

template<typename F>
void split(std::string_view in, std::string_view delim, F&& f) {
    std::size_t pos = 0;
    while((pos = in.find(delim)) != std::string_view::npos) {
        f(in.substr(0,pos));
        in.remove_prefix(pos+delim.size());
    }
    f(in);
}

template<int N, typename F>
auto split_known(std::string_view in, char delim, F&& apply) {
    std::array<decltype(apply(in)),N> ret;
    std::size_t pos = 0;
    std::size_t current = 0;
    while((pos = in.find(delim)) != std::string_view::npos) {
        ret[current++] = apply(in.substr(0,pos));
        in.remove_prefix(pos+1);
    }
    ret[current++] = apply(in);
    return ret;
}

template<typename I = int>
I to_int(std::string_view s) {
    I ret;
    std::from_chars(s.begin(),s.end(),ret);
    return ret;
}

template<typename T, size_t N>
struct fixed_vec {
    std::array<T,N> total;
    size_t size = 0;
    auto begin() {
        return total.begin();
    }
    auto end() {
        return total.begin()+size;
    }
    void push_back(T t) {
        assert(size < N);
        total[size++] = std::move(t);
    }
};

constexpr std::string_view input = R"(Tile 1097:
..#...#.##
.#..#....#
..#....##.
..##..#.##
#.....#...
#..#..##.#
...#..##.#
....#....#
#.#..#.###
...#.#.#.#

Tile 1087:
.#..######
#........#
.###....##
...#.#.#.#
....##....
#.......##
##..##....
###..#...#
##..##..#.
.####.....

Tile 3181:
##.#..#.#.
......###.
.#.#..#...
.....#..##
..#...#...
##.#.....#
...####.#.
.#........
#.......##
##.##.#..#

Tile 3089:
#..#..#...
####.#..##
.#.##.#.#.
#..##.#..#
........#.
##....#...
.....#...#
#...#..#.#
##.....#..
.##.#...##

Tile 1933:
#####.##..
..#...#...
#.#...#..#
.#.......#
##.##.....
..........
#....#.#..
.##....##.
..........
#..#..####

Tile 3821:
.#..#.###.
#.#......#
.....#...#
....#....#
##........
......##..
.#......##
#...#.....
##..#..#.#
....###.#.

Tile 3761:
##.##.#.#.
#.....#...
#..#.#.#.#
##.......#
#..#.#...#
..#.##....
....#.....
...#..#...
#.........
.#..##.#..

Tile 1259:
##.#.##.##
##..#.....
#.....#..#
.........#
###......#
..##...#..
..#....##.
.#....##.#
..#.##.#..
##.#.#.##.

Tile 1361:
##.......#
..#...#.##
#...#..#..
#...#.....
#...#....#
.......#..
....##....
#..##.....
...#.#..##
.#.##.####

Tile 2917:
#.#..##.##
#.....##..
##...#...#
...#.##...
....##..##
....#.##.#
##.##....#
..#...##.#
..##..##.#
.##..###..

Tile 2579:
###.##....
...##.#.#.
...#.#.#.#
#..#...#..
.......##.
.#.###.##.
..........
....#.....
#.#.......
.#.#.#####

Tile 2819:
..#..#####
##.......#
.....##...
....#.....
...#..##..
...#.##.##
##.#..####
...#.#..##
..##.#.###
#..#....##

Tile 3373:
.###.##...
##......#.
..#.......
.###...#.#
##........
.#..#.....
.......#.#
#........#
#..##...##
####.####.

Tile 1297:
#...#..#.#
.........#
#..#..#.##
##.##.#.##
#.#.....##
#...#...##
#.###.#..#
..#...#.#.
..##.##...
####.#.##.

Tile 2671:
#..#....##
#.###.#..#
#..###..##
##.#......
#..##.....
#.........
#.#..#....
#.#...###.
#.##...#.#
...#....##

Tile 1367:
#..#..#.#.
#..#...##.
####...#.#
.##.#....#
...##..#..
.......#.#
#.#..#...#
...#####..
.#.###....
..#.#...#.

Tile 3067:
#...#.##.#
...#.#..#.
##...#...#
###.#....#
.#...##.#.
..#.#.....
.#...##..#
.......#..
.#..#..#..
#.#####.#.

Tile 2153:
..#...###.
..#..#..#.
....#.#...
....#..#.#
........##
#.#.#..#.#
#...#####.
...###..##
......#.##
####....#.

Tile 2347:
.##.#..#.#
#....#..#.
...##.....
#.....#...
##..#....#
.#....##..
...#..#..#
##....##.#
##....#...
.##.#.###.

Tile 3391:
.#.####.##
......#...
...#.#...#
...#...#..
#.........
##.##.....
###..##...
###...##..
...#...#.#
.....#.##.

Tile 1409:
....#.....
..#..##..#
#.#..#...#
.#......#.
....##....
#.#.......
##.#......
###.##.#..
##.......#
..#..#####

Tile 2879:
#.#.#.....
...##.####
...#.##..#
.....#....
###.#.#..#
##..#.....
.###.....#
###.......
...#...#..
..#.##.###

Tile 2591:
..###...#.
#....#....
#.#....#..
#.#.#.#...
..#...#.#.
#.#...#...
.#.#.....#
.#...#....
......##..
..##.####.

Tile 2953:
###.#..###
#......###
.##...#...
.....#....
..#####...
#.....#..#
#.....#...
#......#..
#.....##..
##.#..#..#

Tile 2297:
######.#..
..#....#.#
....#.....
..###...##
..#.#..###
.#.##.#.##
#..#......
##...##.#.
......#.#.
#.#...#.#.

Tile 1567:
##.#..#.#.
......#...
##.....#.#
#####....#
##.....###
...#...#.#
###...#..#
...#...#..
##....#...
..##....##

Tile 1867:
.##..#.#.#
#..#...#.#
##....#...
....#.##..
##..#..#.#
#...#...##
###.#.#..#
.#......##
#.##...##.
##...##...

Tile 3583:
###...###.
.#..#...#.
#...##.#.#
...#...#..
...##.##..
..##.#..#.
#..#.#....
#.#.....#.
.###...#..
##...####.

Tile 1493:
.#.##..#.#
.#..##....
..#.......
#...#.....
###.#.....
....##..#.
#.#.#.#..#
#.#....###
##..#....#
.#.....##.

Tile 2243:
......#.##
..#....#.#
#.......#.
..........
#......#.#
#..#....#.
#.#....###
.....#....
.....##..#
.###.##.##

Tile 1301:
.##...#.#.
...#..###.
##.....#.#
.........#
#...#....#
....#....#
...##...##
..........
#.##..#.##
#.#####...

Tile 2927:
#.#..##.#.
..###.....
#....#....
#..#.##.#.
.....#....
..#.#.#.#.
.##.......
#.....##.#
..#...#..#
#.##.#..#.

Tile 1777:
...#.#..#.
.##....#..
#......#..
........#.
.#...#...#
#.#...#..#
....#....#
.....###.#
###......#
.#.###.##.

Tile 3209:
#.#####.#.
#..#..#..#
#...##...#
#..#..#..#
..##.....#
.#.....#..
#..#...##.
....#.#...
.#.....##.
.......###

Tile 1439:
...#..#.#.
#....#..#.
##.#...###
#....#..#.
#.#..##..#
.##.#...##
.#.......#
..........
#.#.....##
.##....#..

Tile 2657:
#.#.##....
##...##...
.#......#.
.##.#....#
##...##.##
##...##...
#####.####
.....##.#.
##.......#
.##.#..#..

Tile 2621:
.#..#.####
#...##....
#.#...#..#
..........
##.......#
..#...#.#.
#........#
...#.##.##
..#.......
####....##

Tile 1511:
#.##.#.#.#
...#.#.#..
##.#....##
..##..#..#
.#........
......#..#
#..#..##.#
..#.###.##
.##.#.#.##
#...##.#.#

Tile 2857:
.##.####.#
#..#..##.#
##......#.
#..#....#.
..#....##.
#...#..#..
##...#....
...##..#..
#.##...###
...#.###..

Tile 3853:
.#.#....##
.#.#..#..#
..........
........#.
.##.#.....
#.....##.#
#.........
..#......#
#.#......#
####.##.#.

Tile 3793:
#.###.#.##
#.#.#...#.
#.....#.##
....#....#
.#.#......
#......#..
.#...#..#.
##.....#.#
.....#...#
##.....#.#

Tile 3187:
.#..##.###
#..#....##
..#.#.###.
.........#
..##..#..#
#.#.#.#...
....##.#..
...##....#
..#.##.###
.####..##.

Tile 2087:
#..##...#.
.....#..#.
...#..#.#.
#.##....##
##.....##.
####...##.
##.##....#
#..#..#..#
#.....#.##
..#.######

Tile 3557:
#.#.#...##
....#....#
...#..#..#
#.#......#
#.....#...
#...#....#
..#.......
##.......#
#.....##.#
##.##.#.#.

Tile 3271:
##.#.#..##
#..#..#...
#.......#.
#.#...##..
..........
.##..#..##
#.#......#
..##.....#
....#..###
##.###.###

Tile 2999:
.###......
#....##..#
.....#....
.##..##...
...#.....#
#.........
.....#..#.
#..#....##
#.###..#..
.##..#.##.

Tile 2417:
.##.##..#.
.......#..
.#.......#
#.#.....#.
..#..#...#
#...#.#..#
#.....#...
......#.#.
##.#...###
#....##...

Tile 3533:
#.#.#####.
#.#....##.
#..#..####
..#....#.#
#..#....##
#....#..##
#.#.......
#....##..#
.##.#.....
##..#.#...

Tile 1847:
..#..##..#
..##..#...
...##.#..#
#..#......
....#....#
#....#....
#.#.......
...#.#####
.#.#..#...
.....#...#

Tile 1553:
#.##..#.#.
#.##...#..
#..#......
..##..#.#.
##.###....
.#.#....#.
#...#.#..#
#......#..
#.#.####.#
##...#.###

Tile 2239:
...#.#....
#..#......
#.........
#.#..#.##.
...#......
#...#.....
#...#.....
#.#.......
.....##...
#...###..#

Tile 3001:
...##..##.
#........#
##.....##.
.....##...
.......###
...##....#
#.###..##.
#....#...#
#..#.#...#
#..##.##..

Tile 1747:
.#######..
..#..#.#..
......#...
...#.....#
#....#....
#####.....
#....##...
.......#.#
.........#
....#...#.

Tile 1621:
#.#...#..#
#...#....#
#......#.#
#...#.....
..#.#...##
#.#.......
#.#.#...#.
##.##.....
.#..#.....
#.##.#.###

Tile 1399:
...###..##
####...#.#
.#.#.#..#.
###..#....
#......#..
.#...#.#..
#.....#...
....#.#...
.##.#.#.##
#.##..##..

Tile 1373:
#.###..###
#..#...#..
###.#...#.
..##.#....
.#.#....#.
##.......#
.#........
#...#....#
###.#...#.
##.....##.

Tile 2377:
###.#..##.
###.......
#........#
#..#.##..#
#.........
#..##...#.
.#.......#
###..#.#.#
.#...#.#..
#...###.##

Tile 1913:
..#.#.#...
.....#....
....#..#..
.##.#..###
#.##..#..#
#..#....##
.##.#.....
#.....#...
..#.##....
#...#.....

Tile 2089:
.#..##....
##........
.#..###..#
.....##..#
#.......##
.###......
....#.....
#....##...
#..#.##..#
.###.#.#..

Tile 1021:
..#.#.....
.#.#..##.#
#...#.#...
#..#....##
#..##.#..#
...#.#....
#..#......
.....#.#..
###.#..#..
.###....#.

Tile 2689:
.####...##
.#...#....
...#.##.#.
....#.#...
.####.....
#....#....
.#.##.#..#
#..#.#...#
#.##.#...#
####......

Tile 2293:
.#...###.#
.##.....#.
##..#.....
##.......#
#.##...###
.##..#...#
#.....#...
#.##.####.
.##.##.#..
#...#...#.

Tile 1993:
.#..####..
..#..##.##
#...#.##.#
..#...##.#
#.#....##.
#.#.#...#.
........#.
#....#...#
..##...##.
##.##.#..#

Tile 3137:
#...##.#..
...#......
..#...#..#
..#.###..#
..#..#.#..
..##......
#....##..#
.....#....
#.##.....#
##.#.##...

Tile 1277:
###.###.##
#.#.#.#...
#.##..#..#
#.....#..#
..###..#.#
..#..#...#
.#.......#
#........#
##..#.#.##
.#.##.#.##

Tile 2039:
#.#..#.#..
#..##.##.#
....##....
..#.##.###
...##....#
.....###..
###.......
.##.....##
..#......#
....###..#

Tile 3329:
###.##.##.
#.#.....#.
.......###
...#.#...#
.#.#......
#....#.#.#
..#......#
#......#..
#..##.....
#....#####

Tile 3023:
###...###.
#..#..###.
..#.....##
...#...#.#
...#.#.#..
#...#..###
##..##...#
#.#....##.
..#...##.#
#..#.##..#

Tile 1279:
.#..###.#.
..##.##...
..#....#.#
#.........
#..##....#
.....#.##.
#........#
.#....#.##
##..###..#
#..##..#.#

Tile 1601:
.##.#.###.
......#...
.......###
..#.#.##.#
#.###....#
.....#.#.#
##.....###
.#.#.##..#
#.#.#...##
...#.##...

Tile 1063:
#..#.#...#
#.#..#...#
.#.#......
#.##...###
..#..#..##
..#..####.
#....#....
#.#....#.#
......###.
##....#.##

Tile 2659:
..###...##
..#......#
#....#.###
..#..#...#
#....#..#.
##........
..#......#
...#.....#
#.#..#....
####.#####

Tile 2729:
.###...#.#
##........
#.....#.##
.#.......#
..#...##.#
..#......#
#.##...#..
.##.#....#
##..###..#
#..#.#...#

Tile 1759:
...#####.#
..##.#.#..
..##.#...#
....#.#...
#...#..#..
..##.#...#
##.##....#
.......###
##....##..
###..###.#

Tile 1181:
.##.####.#
###..###.#
.#..#...##
#....#.#..
......####
#.#.....#.
#...#.##.#
...##.#..#
......#..#
#.#.#..##.

Tile 3389:
######.##.
...####.#.
....#.....
####....#.
.........#
#......#.#
...#.#....
....#.....
######.###
.#.##..###

Tile 1699:
..###.####
..#.#..#.#
.#.##.....
#.#..#....
.#..#.#.#.
.###.#...#
##........
..........
#..#......
.#.#.##...

Tile 3163:
.#.#.#####
##.#...#.#
#.##.##...
####.#.###
#.#......#
...#...#.#
..#......#
#..#......
.#....#.##
..#####...

Tile 1193:
##.##..##.
..#..#....
#........#
#...##.##.
#....#.##.
#...#.#..#
.....##..#
#..#......
..#...#.#.
##.#...##.

Tile 3331:
..##....##
#.##.##..#
#......###
#.....#..#
....#..#..
#...#.....
######.##.
##....##.#
#......##.
#.####.#..

Tile 1571:
.#...#.##.
#...#.....
#.#.......
#...#.#..#
..#....#.#
...###....
#.........
#####..##.
.##...#..#
#.#.#.###.

Tile 3307:
.#..#..###
#.......#.
##.....###
....###..#
#.##......
..####.#.#
.#..#....#
#.......##
#.#....#..
###.....#.

Tile 2339:
..#..#.#.#
##..#..#.#
##....####
...###...#
.##..##.##
#..#.#..#.
#.......##
####.#...#
.#...#.#..
.#..#####.

Tile 2801:
##....####
#.#......#
####..#...
#.#..#.#.#
..#####..#
#.....#..#
#.......##
#..#..##..
..#..##.#.
#####.###.

Tile 2143:
.##.#..#.#
...#..#.##
#......###
##...#.##.
#......###
......##..
#..#......
.#.....#.#
##..#.#.##
...#.###..

Tile 3469:
..#...#.##
#..##.##..
##.......#
#...##...#
.#.#....#.
##.#.....#
...#....##
.#.#....##
.##.#.##.#
.##.###.#.

Tile 1559:
#.######..
#..#..#...
.#..#.#...
.#.##.....
##....#..#
.##.......
...#..#..#
##.#..#...
..#.....##
....##.#..

Tile 3769:
.#...##..#
.#...#....
#....###..
##....#..#
#.#......#
##.#..#...
....#.##.#
...#.#....
...##.##.#
##.#.###.#

Tile 3079:
...#...##.
......#...
#.....#..#
#.#.##.#..
.#..#.....
#..#.#....
.#.#.#.#..
..#...#..#
....##.#.#
######.#.#

Tile 1709:
#.......##
#..#..#.#.
..#.#...##
#.#..#.##.
##..#...##
##.....###
###..#....
##...##.#.
......#..#
#.#######.

Tile 2383:
.###..#.#.
#.#.#..###
###.....##
.#.....###
.#.##.####
.........#
#.......##
#....##...
#.#..###..
.#..#.#.##

Tile 1549:
.#..#.#.##
#.#.......
..........
#........#
#....#...#
.###..#...
####.##..#
......#...
.#.#.#...#
#...#.#.##

Tile 3433:
..####...#
..#....#.#
.#..#..#..
...##...#.
....#...##
......##..
.##....#..
#....#..#.
#....#....
##..##..#.

Tile 3467:
####.#.###
..#...#..#
##...##.#.
..........
#.#....#..
#.......#.
##.#.###.#
...#....#.
#.......##
##...##.#.

Tile 1789:
#########.
#.#..#...#
#.#....#..
.#..#..#..
#.#.......
#..#.....#
...##.#...
.#.##..#..
..##.##.#.
.####.####

Tile 3463:
.###.###..
.#..##..##
....#....#
###....#.#
....####..
#.#.####.#
#.#......#
.......##.
##...#..##
.#....###.

Tile 1487:
..#.#...#.
.....#..#.
#.......#.
.........#
....##..##
#.#..#....
....##....
####......
....#.....
##.###.#..

Tile 1583:
.....###..
#......#..
#.###.#.#.
..##.....#
.......###
#..#....##
#.......##
.....#...#
.#.......#
.#.#.#..##

Tile 3691:
..##..###.
#.#...##.#
.#...#...#
.#..##...#
#.##.##..#
.#...##...
#.....##..
..#...#.#.
..##.##...
#####..###

Tile 2207:
##.#.###..
#####..#..
.#.#......
........#.
#.#.......
..#...####
###......#
..........
#..##.#...
.#.##.#.##

Tile 2411:
...#......
.#..#.....
#.#..#...#
.#........
#...###...
.#......##
...#.#..##
...#.##...
#........#
#.#....##.

Tile 3643:
###.##.##.
....#.#...
##.###.#..
.....#..##
#......##.
#..#...#.#
##...#...#
..###.#...
#...###..#
#...#..###

Tile 3109:
..#.###.##
#.##....#.
...###..##
...##.#...
.##......#
.......#..
#..##.#..#
#.#...#...
##.#...##.
########.#

Tile 2237:
.#####..#.
#..#...#..
.........#
........##
#..###.#.#
##..#.####
#.#....##.
.#.##.#.##
.......#..
#..#####..

Tile 1039:
#...#.#.#.
..#....#.#
#...##..#.
...##.....
##.......#
##.......#
.#####.#..
..##.....#
..#..#..#.
##.#.##.##

Tile 1471:
####.###..
.#.##....#
.#.....#.#
.#..#....#
#..#.#.#.#
#...###...
...#.#....
#.#.#.....
#.........
.#.#.#..#.

Tile 3673:
##.....###
........##
......###.
##.......#
.#..##....
###..####.
#.##..#..#
###.......
..#....##.
#..#.#.###

Tile 2903:
#.....##..
#.#......#
.#....#.#.
#......#..
###......#
..##....##
#..#.....#
#......#..
###.#.#.#.
..#...####

Tile 3617:
...#..##.#
#....#....
##....##.#
##.#.#..##
....#...##
....##..#.
###..#.###
#......#..
...#..#.#.
..#.#..#.#

Tile 3581:
..#.#####.
##..#.####
###......#
.##.######
#.##.#....
###......#
#.........
.....##.#.
##....#..#
#.#.#.#...

Tile 2141:
#..##.#...
...#.#.###
.#......##
........#.
######.##.
.....##...
..........
.......###
#.....#...
#.###..#.#

Tile 1523:
#.....####
...####..#
.....#.#.#
...#..#...
#...#..#..
##...####.
..##..#.#.
#.##.#...#
#.#..#....
###.##..#.

Tile 3631:
.#.....#.#
#....##...
###.#.##..
.##...#...
.#..#.#...
.....#.#..
..........
.....###.#
.#..#.....
...#..###.

Tile 2423:
###.####..
....#...#.
.##.....##
..#.....#.
#..#.####.
##.......#
...#..#..#
#..##.#...
#.#.#.....
.#..####..

Tile 1901:
########..
.##...#..#
#.....#...
...##.#..#
..#.#....#
..........
##.....#..
.....##..#
###....#..
.###.#.#..

Tile 1579:
##.#..#...
#.#...#.##
#.#.##..##
##.#..##.#
..........
#.........
.#....#...
.#..#.....
...##..#..
#.##.####.

Tile 3457:
##..##.#..
..#....#.#
.#.#.#.#..
.#.......#
#.##..#...
.#.......#
###.#...#.
...#.....#
.##.#..###
.##..#...#

Tile 2029:
#...##.###
###...###.
...#..#..#
.#....##.#
.##.#.#..#
..#......#
...#.#....
#.##.....#
.....##.#.
#.##..#.##

Tile 3593:
......####
#..###..#.
#.........
#......###
...#....#.
..#.##..#.
#.####.#..
....#....#
.#..#..#.#
##...#.#.#

Tile 3851:
..###.#.##
....#.#...
##.#.##..#
.....#..#.
...#..#.#.
..#..#.#.#
##...##...
....####..
.....#.#..
.#.....###

Tile 2741:
.#...##.##
#.#......#
.#.#..##.#
##...##..#
#.......#.
##.......#
.#...#...#
..##.#.#.#
###....#.#
#.#..#.#.#

Tile 1201:
#.######..
#.####.#.#
#...#....#
......###.
#..#..##..
...#.#...#
##..#....#
..........
.........#
.....#.#..

Tile 2179:
##.#..####
.#.#......
#...#.....
##.#...##.
......#..#
.........#
##...###.#
#....#....
#.........
...#..#.##

Tile 2213:
...#.#....
....#..#..
.#.##....#
.#.#....##
###.....##
#.....##.#
...##.....
##..#.....
#...#....#
.#.#.#.#.#

Tile 2791:
.#####....
........##
#..###..##
##..#..#.#
..#..#...#
#..#.....#
#.#..###.#
#.#.......
#........#
.##...#.#.

Tile 1447:
..#.###...
......#...
....#..###
#..##..##.
....#..#.#
.#..#..###
##.##.##.#
.#....#.##
...#..#...
###.#.##.#

Tile 1637:
.######.##
#.##...#.#
.#....#...
##.#......
..#...####
.#........
##..#..#..
#.........
.....##...
.#.##.##.#

Tile 3943:
##...#....
#.#...#...
##....#.##
..#..#..#.
#.......##
#....##...
#...######
#...#.....
..##.#....
.##..####.

Tile 1811:
.#####.#..
#....#..##
#.#..#.#.#
.....#..##
..#..#.#..
.#.##....#
#.#....#..
#..##....#
#......#.#
...###..##

Tile 2281:
..#...#...
.##.....##
#....##...
.......##.
.#..##.#..
..##...#.#
#.......##
#####..#.#
#..##.#...
....##..##

Tile 1877:
#.#.#.#.#.
......#...
.#.....#.#
##.###...#
###..##.#.
....##...#
##..######
.#..##....
#.#.....##
..###.###.

Tile 1163:
.##.###...
...#..##.#
....##..##
.....#....
.####....#
#.......##
#..#.....#
......#..#
......#..#
..###..###

Tile 1873:
####.....#
...#.##...
......#..#
.#.##.....
#..#.#...#
#..###....
##....#...
...##..#.#
#..#.....#
#...#.#.##

Tile 2521:
#..##..#..
..##..#...
#.##.....#
#...#.##..
...#.....#
.##..#.#.#
###..##...
#..##.....
##.....##.
###....##.

Tile 2711:
.#.#.###.#
....#.##..
....#....#
#...#.##.#
#...##.#..
#...#.####
#.##.....#
..#..#....
#.......##
###.##.#..

Tile 2477:
.....#.##.
....#..###
....##.#..
#..#......
....#.#..#
.#....#...
.#..#....#
#..#..#..#
...#.#....
#.###...##

Tile 3571:
###..#####
#.#.#...##
...#.....#
.#.....#..
#.#.....#.
#..###...#
....##...#
....####.#
#..##.#...
..##.##...

Tile 1831:
##..#.....
......#..#
#......##.
##.......#
...##...#.
..#.##.#..
...#.##..#
##.....#..
#...#.##..
##....#.##

Tile 2287:
##.##...#.
...#......
...#.#....
...#....##
#........#
..#...##.#
#..#......
..#.......
.........#
.#....#.#.

Tile 2939:
..#.##.#.#
##.##....#
.#......#.
#..#..#..#
.##.#...##
#..###...#
..#......#
...#.....#
#........#
.#.###..#.

Tile 3671:
.##.#..###
#.........
.##.#.#..#
...#.....#
.####....#
.......###
.......#.#
#.#....##.
##.#......
.###..#..#

Tile 3217:
#...#.##.#
#.........
######....
#...#....#
#.....#.#.
#.#..##..#
#.#.##....
#...#...##
.###.#..##
...#.##..#

Tile 3313:
####.#...#
...####.##
..#...##..
...#.....#
..##.#..#.
.###.#####
...##.#.##
...##..###
...#.#.###
...##...##

Tile 1879:
.#.###.#..
...#..#.#.
.#......##
.#.#...#..
.#....#...
##.#...#.#
.....#....
....#.#.##
#.#....###
.#..###...)";

constexpr size_t count_tiles(std::string_view v) {
    return (v.size()+2)/(11*11+1);
}

constexpr size_t root(size_t o) {
    size_t i = 1;
    for(; i*i != o; ++i);
    return i;
}

constexpr size_t input_square_size = root(count_tiles(input));

uint16_t flip10(uint16_t in) {
    //flip neighboring bits
    in = ((in & 0b10'10'10'10'10) >> 1) | ((in & 0b01'01'01'01'01) << 1);
    //flip bit pairs
    auto n1 = ((in & 0b11'00'00'11'00) >> 2) | ((in & 0b00'11'00'00'11) << 2);
    //flip nibbles around center pair
    n1 = ((n1 & 0b11'11'00'00'00) >> 6) | ((n1 & 0b11'11) << 6);
    //combine center pair with switched nibbles
    return (in & 0b11'00'00) | n1;
}

namespace bitboard {
    //taken from https://www.chessprogramming.org/Flipping_Mirroring_and_Rotating
    using U64 = uint64_t;
    using C64 = uint64_t;
    /**
    * Flip a bitboard vertically about the centre ranks.
    * Rank 1 is mapped to rank 8 and vice versa.
    * @param x any bitboard
    * @return bitboard x flipped vertically
    */
    U64 flipVertical(U64 x) {
        const U64 k1 = C64(0x00FF00FF00FF00FF);
        const U64 k2 = C64(0x0000FFFF0000FFFF);
        x = ((x >>  8) & k1) | ((x & k1) <<  8);
        x = ((x >> 16) & k2) | ((x & k2) << 16);
        x = ( x >> 32)       | ( x       << 32);
        return x;
    }

    /**
    * Mirror a bitboard horizontally about the center files.
    * File a is mapped to file h and vice versa.
    * @param x any bitboard
    * @return bitboard x mirrored horizontally
    */
    U64 mirrorHorizontal (U64 x) {
        const U64 k1 = C64(0x5555555555555555);
        const U64 k2 = C64(0x3333333333333333);
        const U64 k4 = C64(0x0f0f0f0f0f0f0f0f);
        x = ((x >> 1) & k1) | ((x & k1) << 1);
        x = ((x >> 2) & k2) | ((x & k2) << 2);
        x = ((x >> 4) & k4) | ((x & k4) << 4);
        return x;
    }

    /**
    * Flip a bitboard about the diagonal a1-h8.
    * Square h1 is mapped to a8 and vice versa.
    * @param x any bitboard
    * @return bitboard x flipped about diagonal a1-h8
    */
    U64 flipDiagA1H8(U64 x) {
        U64 t;
        const U64 k1 = C64(0x5500550055005500);
        const U64 k2 = C64(0x3333000033330000);
        const U64 k4 = C64(0x0f0f0f0f00000000);
        t  = k4 & (x ^ (x << 28));
        x ^=       t ^ (t >> 28) ;
        t  = k2 & (x ^ (x << 14));
        x ^=       t ^ (t >> 14) ;
        t  = k1 & (x ^ (x <<  7));
        x ^=       t ^ (t >>  7) ;
        return x;
    }

    /**
    * Flip a bitboard about the antidiagonal a8-h1.
    * Square a1 is mapped to h8 and vice versa.
    * @param x any bitboard
    * @return bitboard x flipped about antidiagonal a8-h1
    */
    U64 flipDiagA8H1(U64 x) {
        U64 t;
        const U64 k1 = C64(0xaa00aa00aa00aa00);
        const U64 k2 = C64(0xcccc0000cccc0000);
        const U64 k4 = C64(0xf0f0f0f00f0f0f0f);
        t  =       x ^ (x << 36) ;
        x ^= k4 & (t ^ (x >> 36));
        t  = k2 & (x ^ (x << 18));
        x ^=       t ^ (t >> 18) ;
        t  = k1 & (x ^ (x <<  9));
        x ^=       t ^ (t >>  9) ;
        return x;
    }

}

struct Block {
    //10-bit fields
    std::array<uint16_t,4> edges; //top,right,left,bottom
    
    uint64_t content;
    uint64_t num;
    std::bitset<4> neighbors{};
    
    void flipV() {
        content = bitboard::flipVertical(content);
        std::swap(edges[0],edges[3]);
        neighbors = (neighbors << 3) | (neighbors & std::bitset<4>(0b0110)) | (neighbors >> 3);
        edges[1] = flip10(edges[1]);
        edges[2] = flip10(edges[2]);
    }

    void flipH() {
        content = bitboard::mirrorHorizontal(content);
        std::swap(edges[1],edges[2]);
        auto n = neighbors.to_ulong();
        n = ((n & 0b0100) >> 1) | ((n & 0b0010) << 1) | (n & 0b1001);
        neighbors = n;
        edges[0] = flip10(edges[0]);
        edges[3] = flip10(edges[3]);
    }

    void flipAD() {
        content = bitboard::flipDiagA1H8(content);
        std::swap(edges[0],edges[2]);
        std::swap(edges[1],edges[3]);
        neighbors = (neighbors >> 2) | (neighbors << 2);
    }

    void flipD() {
        content = bitboard::flipDiagA8H1(content);
        std::swap(edges[0],edges[1]);
        std::swap(edges[2],edges[3]);
        for(auto & e: edges) e = flip10(e);
        neighbors = ((neighbors.to_ulong() & 0b1010) >> 1) | ((neighbors.to_ulong() & 0b0101) << 1);
    }

    void toTopLeftCorner() {
        switch(neighbors.to_ulong()) {
            case 0b0011:
                //top right
                flipV();
                break;
            case 0b0101:
                //top left
                flipD();
                break;
            case 0b1100:
                //bottom left, mirror
                flipH();
                break;
            case 0b1010:
                //bottom right
                //nothing
                break;
        }
        assert(neighbors.to_ulong() == 0b1010);
    }

    void alignTop(int16_t target, size_t edge) {
        switch(edge) {
            case 0:
                //top, nothing needs to be done
                break;
            case 1:
                //right, flip over diagonal
                flipD();
                break;
            case 2:
                //left, flip over anti-diagonal
                flipAD();
                break;
            case 3:
                //bottom
                flipV();
                break;
        }
        if(edges[0] != target) flipH();
        assert(edges[0] == target);
    }

    void alignLeft(int16_t target, size_t edge) {
        switch(edge) {
            case 0:
                //top
                flipAD();
                break;
            case 1:
                //right
                flipH();
                break;
            case 2:
                //left
                break;
            case 3:
                //bottom
                flipD();
                break;
        }
        if(edges[2] != target) flipV();
        assert(edges[2] == target);
    }
};

std::ostream& operator<<(std::ostream& o, const Block& b) {
    o << std::bitset<10>(b.edges[0]).to_string('.','#') << '\n';

    for(int i = 0; i < 8; ++i) {
        o << ((b.edges[2] & (1 << (7-i+1))) ? '#' : '.');
        o << std::bitset<8>(b.content >> (8*(7-i))).to_string('.','#');
        o << ((b.edges[1] & (1 << (7-i+1))) ? '#' : '.');
        o << '\n';
    }

    o << std::bitset<10>(b.edges[3]).to_string('.','#') << '\n';

    return o;
}

auto parse(std::string_view input) {
    std::vector<Block> blocks;
    split(input,"\n\n",[&blocks](std::string_view block) {
        auto lines = split_known<11>(block,'\n',[](auto a){return a;});
        auto tile = lines[0];
        tile.remove_suffix(1);
        tile.remove_prefix(sizeof("Tile ")-1);
        uint64_t num = to_int<uint64_t>(tile);
        uint64_t content = 0;
        std::array<std::bitset<10>,4> edges;
        for(int i = 0; i < 10; ++i) {
            std::bitset<10> line(lines[i+1].data(),10,'.','#');
            if(i == 0) edges[0] = line;
            else if(i == 9) edges[3] = line;
            else {
                content <<= 8;
                content |= (line.to_ullong() >> 1) & 0xff;
            }
            edges[1] <<= 1;
            edges[2] <<= 1;
            edges[1].set(0,line.test(0));
            edges[2].set(0,line.test(9));
        }
        Block b{{},content,num};
        std::ranges::transform(edges,b.edges.begin(),[](auto e){return static_cast<uint16_t>(e.to_ulong());});
        blocks.push_back(b);
    });
    return blocks;
}

using neighbors_t = std::unordered_map<uint16_t,fixed_vec<std::pair<size_t,int>,2>>;

auto get_neighbors(std::vector<Block>& input) {
    neighbors_t edge_neighbors;
    for(size_t i = 0; i < input.size(); ++i) {
        for(int j = 0; j < 4; ++j) {
            uint16_t e_val = input[i].edges[j];
            auto m = std::min(e_val,flip10(e_val));
            auto& ns = edge_neighbors[m];
            if(ns.size == 1) {
                input[i].neighbors.set(j);
                auto [n,edge] = *ns.begin();
                input[n].neighbors.set(edge);
            }
            ns.push_back({i,j});
        }
    }
    return edge_neighbors;
}

auto part1(const std::vector<Block>& input) {
    uint64_t edges = 1;
    for(auto& b : input) {
        if(b.neighbors.count() == 2) {
            edges *= b.num;
        }
    }
    return edges;
}

auto find_monsters(std::array<std::array<uint64_t,input_square_size>,input_square_size> board) {
    using line = std::bitset<input_square_size*8>;
    std::array<line,input_square_size*8> field;
    for(size_t y = 0; y < input_square_size; ++y) {
        std::array<line,8> lines;
        for(size_t x = 0; x < input_square_size; ++x) {
            uint64_t content = board[y][x];
            for(int l = 0; l < 8; ++l) {
                lines[l] <<= 8;
                lines[l] |= line((content >> (8*(7-l))) & 0xff);
            }
        }
        std::copy(lines.begin(),lines.end(),field.begin()+8*y);
    }

    std::array<line,3> monster = {
                                    line("                  # ",20,' ','#'),
                                    line("#    ##    ##    ###",20,' ','#'),
                                    line(" #  #  #  #  #  #   ",20,' ','#')
                                };
    
    int total = 0;
    for(auto y = 0; y < input_square_size*8-3; ++y) {
        for(auto x = 0; x < input_square_size*8 - 20; ++x) {
            bool found = true;
            for(int i = 0; i < 3; ++i) {
                if(((field[y+i] >> x) & monster[i]) != monster[i]) {
                    found = false;
                    break;
                }
            }
            if(found) ++total;
        }
    }

    return total;
}

auto part2_impl(const std::vector<Block>& input, const neighbors_t& neighbors, size_t corner, bool flip) {
    auto b = input[corner];
    b.toTopLeftCorner();
    if(flip) b.flipAD();
    
    std::array<std::array<uint64_t,input_square_size>,input_square_size> board;
    
    board[0][0] = b.content;
    
    auto match_up = std::make_pair(corner,b.edges[3]);
    auto match_left = std::make_pair(corner,b.edges[1]);

    auto lookup_key = [&](uint16_t edge) {return neighbors.find(std::min(edge,flip10(edge)))->second;};

    for(size_t y = 0; y < input_square_size; ++y) {
        if(y != 0) {
            auto [upi,upe] = match_up;
            auto [a,b] = lookup_key(upe).total;
            auto [index,edge] = (upi == a.first) ? b : a;

            auto current = input[index];
            current.alignTop(upe,edge);
            board[y][0] = current.content;
            match_up = std::make_pair(index,current.edges[3]);
            match_left = std::make_pair(index,current.edges[1]);
        }
        for(size_t x = 1; x < input_square_size; ++x) {
            auto [lefti, lefte] = match_left;
            auto [a,b] = lookup_key(lefte).total;
            auto [index,edge] = (lefti == a.first) ? b : a;
            auto current = input[index];

            current.alignLeft(lefte,edge);
            board[y][x] = current.content;
            match_left = std::make_pair(index,current.edges[1]);
        }
    }

    return find_monsters(board);
}

auto part2(const std::vector<Block>& input, const neighbors_t& neighbors) {
    auto total = std::transform_reduce(input.begin(),input.end(),0ul,std::plus<>{},[](auto b){return std::popcount(b.content);});

    auto corner = input.begin();
    while((corner = std::find_if(corner,input.end(),[](auto b){return b.neighbors.count()==2;})) != input.end()) {
        if(auto t = part2_impl(input,neighbors,corner-input.begin(),false); t > 0) {
            total -= t * 15;
            break;
        }
        if(auto t = part2_impl(input,neighbors,corner-input.begin(),true); t > 0) {
            total -= t * 15;
            break;
        }
        ++corner;
    }

    return total;
}

void solution(std::string_view input) {
    auto in = parse(input);
    auto neighbors = get_neighbors(in);
    std::cout << "Part 1: " << part1(in) << '\n';
    std::cout << "Part 2: " << part2(in,neighbors) << '\n';
}

int main() {
    solution(input);
}
